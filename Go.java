/* Generated By:JavaCC: Do not edit this line. Go.java */
public class Go implements GoConstants {
    public static void main(String[] args) throws ParseException {
        Go lexer = new Go(System.in);
        Token token;
        while ((token = lexer.getNextToken()).kind != GoConstants.EOF) {
            switch (token.kind) {
                case GoConstants.BREAK:
                    System.out.println("BREAK ");
                    break;
                case GoConstants.DEFAULTT:
                    System.out.println("DEFAULT ");
                    break;
                case GoConstants.FUNC:
                    System.out.println("FUNC ");
                    break;
                case GoConstants.INTERFACE:
                    System.out.println("INTERFACE ");
                    break;
                case GoConstants.SELECT:
                    System.out.println("SELECT ");
                    break;
                case GoConstants.CASE:
                    System.out.println("CASE ");
                    break;
                case GoConstants.DEFER:
                    System.out.println("DEFER ");
                    break;
                case GoConstants.GO:
                    System.out.println("GO ");
                    break;
                case GoConstants.MAP:
                    System.out.println("MAP ");
                    break;
                case GoConstants.STRUCT:
                    System.out.println("STRUCT ");
                    break;
                case GoConstants.CHAN:
                    System.out.println("CHAN ");
                    break;
                case GoConstants.IF:
                    System.out.println("IF ");
                    break;
                case GoConstants.ELSE:
                    System.out.println("ELSE ");
                    break;
                case GoConstants.GOTO:
                    System.out.println("GOTO ");
                    break;
                case GoConstants.PACKAGE:
                    System.out.println("PACKAGE ");
                    break;
                case GoConstants.SWITCH:
                    System.out.println("SWITCH ");
                    break;
                case GoConstants.CONST:
                    System.out.println("CONST ");
                    break;
                case GoConstants.FALLTHROUGH:
                    System.out.println("FALLTHROUGH ");
                    break;
                case GoConstants.RANGE:
                    System.out.println("RANGE ");
                    break;
                case GoConstants.TYPE_LABEL:
                    System.out.println("TYPE_LABEL ");
                    break;
                case GoConstants.CONTINUE:
                    System.out.println("CONTINUE ");
                    break;
                case GoConstants.FOR:
                    System.out.println("FOR ");
                    break;
                case GoConstants.IMPORT:
                    System.out.println("IMPORT ");
                    break;
                case GoConstants.RETURN:
                    System.out.println("RETURN ");
                    break;
                case GoConstants.VAR:
                    System.out.println("VAR ");
                    break;
                case GoConstants.EQUAL_COMPARISON:
                    System.out.println("EQUAL_COMPARISON ");
                    break;
                case GoConstants.DIFFERENCE_COMPARISON:
                    System.out.println("DIFFERENCE_COMPARISON ");
                    break;
                case GoConstants.SUM_EQUAL:
                    System.out.println("SUM_EQUAL ");
                    break;
                case GoConstants.DIFFERENCE_EQUAL:
                    System.out.println("DIFFERENCE_EQUAL ");
                    break;
                case GoConstants.LESS_OR_EQUAL:
                    System.out.println("LESS_OR_EQUAL ");
                    break;
                case GoConstants.MORE_OR_EQUAL:
                    System.out.println("MORE_OR_EQUAL ");
                    break;
                case GoConstants.AND:
                    System.out.println("AND ");
                    break;
                case GoConstants.OR:
                    System.out.println("OR ");
                    break;
                case GoConstants.LEFT_SHIFT:
                    System.out.println("LEFT_SHIFT ");
                    break;
                case GoConstants.RIGHT_SHIFT:
                    System.out.println("RIGHT_SHIFT ");
                    break;
                case GoConstants.LEFT_SHIFT_EQUAL:
                    System.out.println("LEFT_SHIFT_EQUAL ");
                    break;
                case GoConstants.RIGHT_SHIFT_EQUAL:
                    System.out.println("RIGHT_SHIFT_EQUAL ");
                    break;
                case GoConstants.AND_NOT:
                    System.out.println("AND_NOT ");
                    break;
                case GoConstants.AND_NOT_EQUAL:
                    System.out.println("AND_NOT_EQUAL ");
                    break;
                case GoConstants.AND_EQUAL:
                    System.out.println("AND_EQUAL ");
                    break;
                case GoConstants.MULTIPLICATION_EQUAL:
                    System.out.println("MULTIPLICATION_EQUAL ");
                    break;
                case GoConstants.DIVISION_EQUAL:
                    System.out.println("DIVISION_EQUAL ");
                    break;
                case GoConstants.REST_EQUAL:
                    System.out.println("REST_EQUAL ");
                    break;
                case GoConstants.OR_EQUAL:
                    System.out.println("OR_EQUAL ");
                    break;
                case GoConstants.EXPONENTI_EQUAL:
                    System.out.println("EXPONENTI_EQUAL ");
                    break;
                case GoConstants.CHANNEL_OPERATOR:
                    System.out.println("CHANNEL_OPERATOR ");
                    break;
                case GoConstants.INCREMENT:
                    System.out.println("INCREMENT ");
                    break;
                case GoConstants.DECREMENT:
                    System.out.println("DECREMENT ");
                    break;
                case GoConstants.OPERATOR_DECLARATION:
                    System.out.println("OPERATOR_DECLARATION ");
                    break;
                case GoConstants.PARAMETERS_VARIADICS:
                    System.out.println("PARAMETERS_VARIADICS ");
                    break;
                case GoConstants.SUM:
                    System.out.println("SUM ");
                    break;
                case GoConstants.DIFFERENCE:
                    System.out.println("DIFFERENCE ");
                    break;
                case GoConstants.MULTIPLICATION:
                    System.out.println("MULTIPLICATION ");
                    break;
                case GoConstants.DIVISION:
                    System.out.println("DIVISION ");
                    break;
                case GoConstants.REST:
                    System.out.println("REST ");
                    break;
                case GoConstants.AND_BIT:
                    System.out.println("AND_BIT ");
                    break;
                case GoConstants.OR_BIT:
                    System.out.println("OR_BIT ");
                    break;
                case GoConstants.NOT:
                    System.out.println("NOT ");
                    break;
                case GoConstants.EXPONENT:
                    System.out.println("EXPONENT ");
                    break;
                case GoConstants.SMALLER:
                    System.out.println("SMALLER ");
                    break;
                case GoConstants.BIGGER:
                    System.out.println("BIGGER ");
                    break;
                case GoConstants.EQUAL:
                    System.out.println("EQUAL ");
                    break;
                case GoConstants.KEY_IN:
                    System.out.println("KEY_IN ");
                    break;
                case GoConstants.KEY_OUT:
                    System.out.println("KEY_OUT ");
                    break;
                case GoConstants.PARENTHESES_IN:
                    System.out.println("PARENTHESES_IN ");
                    break;
                case GoConstants.PARENTHESES_OUT:
                    System.out.println("PARENTHESES_OUT ");
                    break;
                case GoConstants.BRACKET_IN:
                    System.out.println("BRACKET_IN ");
                    break;
                case GoConstants.BRACKET_OUT:
                    System.out.println("BRACKET_OUT ");
                    break;
                case GoConstants.COMMA:
                    System.out.println("COMMA ");
                    break;
                case GoConstants.SEMICOLON:
                    System.out.println("SEMICOLON ");
                    break;
                case GoConstants.PERIOD:
                    System.out.println("PERIOD ");
                    break;
                case GoConstants.TILDE:
                    System.out.println("TILDE ");
                    break;
                case GoConstants.INT_LIT:
                    System.out.println("INT_LIT ");
                    break;
                case GoConstants.FLOAT_LIT:
                    System.out.println("FLOAT_LIT ");
                    break;
                case GoConstants.BINARY_LIT:
                    System.out.println("BINARY_LIT ");
                    break;
                case GoConstants.OCTAL_LIT:
                    System.out.println("OCTAL_LIT ");
                    break;
                case GoConstants.DECIMAL_LIT:
                    System.out.println("DECIMAL_LIT ");
                    break;
                case GoConstants.IMAGINARY_LIT:
                    System.out.println(" IMAGINARY_LIT ");
                    break;
                case GoConstants.RUNE_LIT:
                    System.out.println("RUNE_LIT ");
                    break;
                case GoConstants.STRING_LITERAL:
                    System.out.println("STRING_LITERAL ");
                    break;
                case GoConstants.CHARACTER_LITERAL:
                    System.out.println("CHARACTER_LITERAL ");
                    break;
                case GoConstants.SINGLE_LINE_COMMENT:
                    System.out.println("SINGLE_LINE_COMMENT ");
                    break;
                case GoConstants.MULTI_LINE_COMMENT:
                    System.out.println("MULTI_LINE_COMMENT ");
                    break;
                    /*
                case GoConstants.WHITESPACE:
                    // Ignore whitespace tokens
                    break;
                    */
                case GoConstants.IDENTIFIER:
                    System.out.println("IDENTIFIER ");
                    break;
                default:
                    System.out.println("UNKNOWN ");
                    break;
            }
        }
    }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }

  /** Constructor with InputStream. */
  public Go(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Go(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Go(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Go(GoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[119];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 119; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
