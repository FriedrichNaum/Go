FUNC // Função que utiliza arrays
func
IDENTIFIER usoDeArray
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER arr
OPERATOR_DECLARATION :=
BRACKET_IN [
INT_LIT 5
BRACKET_OUT ]
IDENTIFIER int
KEY_IN {
INT_LIT 1
COMMA ,
INT_LIT 2
COMMA ,
INT_LIT 3
COMMA ,
INT_LIT 4
COMMA ,
INT_LIT 5
KEY_OUT }
FOR for
IDENTIFIER i
OPERATOR_DECLARATION :=
INT_LIT 0
SEMICOLON ;
IDENTIFIER i
SMALLER <
IDENTIFIER len
PARENTHESES_IN (
IDENTIFIER arr
PARENTHESES_OUT )
SEMICOLON ;
IDENTIFIER i
INCREMENT ++
KEY_IN {
IDENTIFIER f
OPERATOR_DECLARATION :=
INT_LIT 1
SUM +
IDENTIFIER arr
BRACKET_IN [
IDENTIFIER i
BRACKET_OUT ]
KEY_OUT }
RETURN return
IDENTIFIER i
KEY_OUT }
FUNC func
IDENTIFIER main
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER a
OPERATOR_DECLARATION :=
INT_LIT 15
IDENTIFIER b
OPERATOR_DECLARATION :=
INT_LIT 5
IDENTIFIER soma
OPERATOR_DECLARATION :=
IDENTIFIER a
SUM +
IDENTIFIER b
MULTIPLICATION *
IDENTIFIER a
DIFFERENCE -
IDENTIFIER b
IDENTIFIER subtracao
OPERATOR_DECLARATION :=
IDENTIFIER a
DIFFERENCE -
IDENTIFIER b
IDENTIFIER multiplicacao
OPERATOR_DECLARATION :=
IDENTIFIER a
MULTIPLICATION *
IDENTIFIER b
IDENTIFIER divisao
OPERATOR_DECLARATION :=
IDENTIFIER a
DIVISION /
IDENTIFIER b
IDENTIFIER modulo
OPERATOR_DECLARATION :=
IDENTIFIER a
REST %
IDENTIFIER b
IF if
IDENTIFIER a
MORE_OR_EQUAL >=
INT_LIT 10
KEY_IN {
IDENTIFIER a
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
ELSE else
IF if
IDENTIFIER a
EQUAL_COMPARISON ==
INT_LIT 10
KEY_IN {
IDENTIFIER b
OPERATOR_DECLARATION :=
INT_LIT 5
KEY_OUT }
ELSE else
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
IDENTIFIER b
MORE_OR_EQUAL >=
INT_LIT 5
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
IDENTIFIER b
DIFFERENCE_COMPARISON !=
INT_LIT 6
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
IDENTIFIER a
LESS_OR_EQUAL <=
INT_LIT 5
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
PARENTHESES_IN (
IDENTIFIER a
LESS_OR_EQUAL <=
INT_LIT 5
PARENTHESES_OUT )
AND &&
PARENTHESES_IN (
IDENTIFIER b
BIGGER >
INT_LIT 6
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
PARENTHESES_IN (
IDENTIFIER a
LESS_OR_EQUAL <=
INT_LIT 5
PARENTHESES_OUT )
OR ||
PARENTHESES_IN (
IDENTIFIER b
BIGGER >
PARENTHESES_IN (
IDENTIFIER usoDeArray
PARENTHESES_IN (
PARENTHESES_OUT )
SUM +
INT_LIT 1
PARENTHESES_OUT )
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IF if
NOT !
PARENTHESES_IN (
IDENTIFIER a
LESS_OR_EQUAL <=
INT_LIT 5
PARENTHESES_OUT )
OR ||
PARENTHESES_IN (
IDENTIFIER b
BIGGER >
INT_LIT 6
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER c
OPERATOR_DECLARATION :=
INT_LIT 10
KEY_OUT }
IDENTIFIER i
OPERATOR_DECLARATION :=
INT_LIT 0
FOR for
IDENTIFIER i
SMALLER <
INT_LIT 5
KEY_IN {
IDENTIFIER i
OPERATOR_DECLARATION :=
IDENTIFIER i
SUM +
INT_LIT 1
KEY_OUT }
IDENTIFIER usoDeArray
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_OUT }
