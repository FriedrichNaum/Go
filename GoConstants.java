/* Generated By:JavaCC: Do not edit this line. GoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int DEFAULTT = 9;
  /** RegularExpression Id. */
  int FUNC = 10;
  /** RegularExpression Id. */
  int INTERFACE = 11;
  /** RegularExpression Id. */
  int SELECT = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int DEFER = 14;
  /** RegularExpression Id. */
  int GO = 15;
  /** RegularExpression Id. */
  int MAP = 16;
  /** RegularExpression Id. */
  int STRUCT = 17;
  /** RegularExpression Id. */
  int CHAN = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int GOTO = 20;
  /** RegularExpression Id. */
  int PACKAGE = 21;
  /** RegularExpression Id. */
  int SWITCH = 22;
  /** RegularExpression Id. */
  int CONST = 23;
  /** RegularExpression Id. */
  int FALLTHROUGH = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int RANGE = 26;
  /** RegularExpression Id. */
  int TYPE_LABEL = 27;
  /** RegularExpression Id. */
  int CONTINUE = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int IMPORT = 30;
  /** RegularExpression Id. */
  int RETURN = 31;
  /** RegularExpression Id. */
  int VAR = 32;
  /** RegularExpression Id. */
  int EQUAL_COMPARISON = 33;
  /** RegularExpression Id. */
  int DIFFERENCE_COMPARISON = 34;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 35;
  /** RegularExpression Id. */
  int MORE_OR_EQUAL = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int OR = 38;
  /** RegularExpression Id. */
  int RIGHT_SHIFT = 39;
  /** RegularExpression Id. */
  int LEFT_SHIFT = 40;
  /** RegularExpression Id. */
  int AND_NOT = 41;
  /** RegularExpression Id. */
  int SUM_EQUAL = 42;
  /** RegularExpression Id. */
  int DIFFERENCE_EQUAL = 43;
  /** RegularExpression Id. */
  int MULTIPLICATION_EQUAL = 44;
  /** RegularExpression Id. */
  int DIVISION_EQUAL = 45;
  /** RegularExpression Id. */
  int REST_EQUAL = 46;
  /** RegularExpression Id. */
  int AND_EQUAL = 47;
  /** RegularExpression Id. */
  int OR_EQUAL = 48;
  /** RegularExpression Id. */
  int EXPONENTI_EQUAL = 49;
  /** RegularExpression Id. */
  int LEFT_SHIFT_EQUAL = 50;
  /** RegularExpression Id. */
  int RIGHT_SHIFT_EQUAL = 51;
  /** RegularExpression Id. */
  int AND_NOT_EQUAL = 52;
  /** RegularExpression Id. */
  int CHANNEL_OPERATOR = 53;
  /** RegularExpression Id. */
  int INCREMENT = 54;
  /** RegularExpression Id. */
  int DECREMENT = 55;
  /** RegularExpression Id. */
  int OPERATOR_DECLARATION = 56;
  /** RegularExpression Id. */
  int PARAMETERS_VARIADICS = 57;
  /** RegularExpression Id. */
  int TWO_POINTS = 58;
  /** RegularExpression Id. */
  int SUM = 59;
  /** RegularExpression Id. */
  int DIFFERENCE = 60;
  /** RegularExpression Id. */
  int MULTIPLICATION = 61;
  /** RegularExpression Id. */
  int DIVISION = 62;
  /** RegularExpression Id. */
  int REST = 63;
  /** RegularExpression Id. */
  int AND_BIT = 64;
  /** RegularExpression Id. */
  int OR_BIT = 65;
  /** RegularExpression Id. */
  int EXPONENT = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int SMALLER = 68;
  /** RegularExpression Id. */
  int BIGGER = 69;
  /** RegularExpression Id. */
  int EQUAL = 70;
  /** RegularExpression Id. */
  int KEY_IN = 71;
  /** RegularExpression Id. */
  int KEY_OUT = 72;
  /** RegularExpression Id. */
  int PARENTHESES_IN = 73;
  /** RegularExpression Id. */
  int PARENTHESES_OUT = 74;
  /** RegularExpression Id. */
  int BRACKET_IN = 75;
  /** RegularExpression Id. */
  int BRACKET_OUT = 76;
  /** RegularExpression Id. */
  int COMMA = 77;
  /** RegularExpression Id. */
  int SEMICOLON = 78;
  /** RegularExpression Id. */
  int PERIOD = 79;
  /** RegularExpression Id. */
  int TILDE = 80;
  /** RegularExpression Id. */
  int INT_LIT = 81;
  /** RegularExpression Id. */
  int DECIMAL_LIT = 82;
  /** RegularExpression Id. */
  int BINARY_LIT = 83;
  /** RegularExpression Id. */
  int OCTAL_LIT = 84;
  /** RegularExpression Id. */
  int FLOAT_LIT = 85;
  /** RegularExpression Id. */
  int HEXA_LIT = 86;
  /** RegularExpression Id. */
  int IMAGINARY_LIT = 87;
  /** RegularExpression Id. */
  int IDENTIFIER = 88;
  /** RegularExpression Id. */
  int RUNE_LIT = 89;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 90;
  /** RegularExpression Id. */
  int STRING_LITERAL = 91;
  /** RegularExpression Id. */
  int STRINGLIT = 92;
  /** RegularExpression Id. */
  int UNICODE_CHAR = 93;
  /** RegularExpression Id. */
  int DIGIT = 94;
  /** RegularExpression Id. */
  int BINARY = 95;
  /** RegularExpression Id. */
  int OCTAL = 96;
  /** RegularExpression Id. */
  int LETTER = 97;
  /** RegularExpression Id. */
  int HEXA = 98;
  /** RegularExpression Id. */
  int DECIMAL_DIGITS = 99;
  /** RegularExpression Id. */
  int BINARY_DIGITS = 100;
  /** RegularExpression Id. */
  int OCTAL_DIGITS = 101;
  /** RegularExpression Id. */
  int HEXA_DIGITS = 102;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 103;
  /** RegularExpression Id. */
  int HEXA_MANTISSA = 104;
  /** RegularExpression Id. */
  int HEXA_EXPONENT = 105;
  /** RegularExpression Id. */
  int DECIMAL_FLOAT_LIT = 106;
  /** RegularExpression Id. */
  int HEXA_FLOAT_LIT = 107;
  /** RegularExpression Id. */
  int UNICODE_VALUE = 108;
  /** RegularExpression Id. */
  int BYTE_VALUE = 109;
  /** RegularExpression Id. */
  int OCTAL_BYTE_VALUE = 110;
  /** RegularExpression Id. */
  int HEX_BYTE_VALUE = 111;
  /** RegularExpression Id. */
  int LITLE_U_VALUE = 112;
  /** RegularExpression Id. */
  int BIG_U_VALUE = 113;
  /** RegularExpression Id. */
  int UNICODE_LETTER_CODEPOINT = 114;
  /** RegularExpression Id. */
  int UNICODE_DIGIT_CODEPOINT = 115;
  /** RegularExpression Id. */
  int ESCAPED_CHAR = 116;
  /** RegularExpression Id. */
  int INTERPRETED_STRING_LIT = 117;
  /** RegularExpression Id. */
  int RAW_STRING_LIT = 118;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"break\"",
    "\"default\"",
    "\"func\"",
    "\"interface\"",
    "\"select\"",
    "\"case\"",
    "\"defer\"",
    "\"go\"",
    "\"map\"",
    "\"struct\"",
    "\"chan\"",
    "\"else\"",
    "\"goto\"",
    "\"package\"",
    "\"switch\"",
    "\"const\"",
    "\"fallthrough\"",
    "\"if\"",
    "\"range\"",
    "\"type\"",
    "\"continue\"",
    "\"for\"",
    "\"import\"",
    "\"return\"",
    "\"var\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\">>\"",
    "\"<<\"",
    "\"&^\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&^=\"",
    "\"<-\"",
    "\"++\"",
    "\"--\"",
    "\":=\"",
    "\"...\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "\".\"",
    "\"~\"",
    "<INT_LIT>",
    "<DECIMAL_LIT>",
    "<BINARY_LIT>",
    "<OCTAL_LIT>",
    "<FLOAT_LIT>",
    "<HEXA_LIT>",
    "<IMAGINARY_LIT>",
    "<IDENTIFIER>",
    "<RUNE_LIT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<STRINGLIT>",
    "<UNICODE_CHAR>",
    "<DIGIT>",
    "<BINARY>",
    "<OCTAL>",
    "<LETTER>",
    "<HEXA>",
    "<DECIMAL_DIGITS>",
    "<BINARY_DIGITS>",
    "<OCTAL_DIGITS>",
    "<HEXA_DIGITS>",
    "<DECIMAL_EXPONENT>",
    "<HEXA_MANTISSA>",
    "<HEXA_EXPONENT>",
    "<DECIMAL_FLOAT_LIT>",
    "<HEXA_FLOAT_LIT>",
    "<UNICODE_VALUE>",
    "<BYTE_VALUE>",
    "<OCTAL_BYTE_VALUE>",
    "<HEX_BYTE_VALUE>",
    "<LITLE_U_VALUE>",
    "<BIG_U_VALUE>",
    "<UNICODE_LETTER_CODEPOINT>",
    "<UNICODE_DIGIT_CODEPOINT>",
    "<ESCAPED_CHAR>",
    "<INTERPRETED_STRING_LIT>",
    "<RAW_STRING_LIT>",
  };

}
