S' -> S
S -> ''
S -> FUNCTIONDECL S
FUNCTIONDECL -> FUNC FUNCTIONAME SIGNATURE FUNCTIONBODY_EMPTY
FUNCTIONNAME -> IDENTIFIER
FUNCTIONBODY_EMPTY -> FUNCTIONBODY
FUNCTIONBODY_EMPTY -> ''
FUNCTIONBODY -> BLOCK
BLOCK -> KEY_IN STATEMENTLIST KEY_OUT
COMMA_EMPTY -> ''
COMMA_EMPTY -> COMMA
STATEMENTLIST -> STATEMENT_REP
STATEMENT_REP -> ''
STATEMENT_REP -> STATEMENT SEMICOLON STATEMENTLIST_REP 
STATEMENT -> DECLARATION 
STATEMENT -> LABELEDSTMT
STATEMENT -> SIMPLESTMT
STATEMENT -> GOSTMT
STATEMENT -> RETURNSTMT
STATEMENT -> FALLTHROUGHSTMT
STATEMENT -> BLOCK
STATEMENT -> IFSTMT
STATEMENT -> SELECTSTMT
STATEMENT -> FORSTMT
STATEMENT -> DEFERSTMT
SIMPLESTMT -> EMPTYSTMT
SIMPLESTMT -> EXPRESSIONSTMT
SIMPLESTMT -> SENDSTMT
SIMPLESTMT -> ASSIGMENT
SIMPLESTMT -> SHORTVARDECL
EMPTYSTMT -> ''
EXPRESSIONSTMT -> EXPRESSION
EXPRESSION -> UNARYEXPR
EXPRESSION -> EXPRESSION BINARY_OP EXPRESSION
UNARYEXPR -> PRIMARYEXPR
UNARYEXPR -> UNARY_OP UNARYEXPR
BINARY_OP -> OR
BINARY_OP -> AND
BINARY_OP -> REL_OP
BINARY_OP -> ADD_OP
BINARY_OP -> MUL_OP 
REL_OP -> EQUAL_COMPARISON
REL_OP -> DIFFERENCE_COMPARISON
REL_OP -> SMALLER
REL_OP -> LESS_OR_EQUAL
REL_OP -> BIGGER
REL_OP -> MORE_OR_EQUAL
ADD_OP -> SUM
ADD_OP -> DIFFERENCE
ADD_OP -> OR_BIT
ADD_OP -> EXPONENT
MUL_OP -> MULTIPLICATION
MUL_OP -> DIVISION
MUL_OP -> REST
MUL_OP -> AND_BIT
MUL_OP -> AND_NOT
UNARY_OP -> SUM
UNARY_OP -> DIFFERENCE
UNARY_OP -> NOT
UNARY_OP -> EXPONENT
UNARY_OP -> MULTIPLICATION
UNARY_OP -> AND_BIT
UNARY_OP -> CHANNEL
PRIMARYEXPR -> OPERAND
PRIMARYEXPR -> CONVERSION
PRIMARYEXPR -> METHODEXPR
PRIMARYEXPR -> PRIMARYEXPR SELECTOR
PRIMARYEXPR -> PRIMARYEXPR INDEX
PRIMARYEXPR -> PRIMARYEXPR SLICE
PRIMARYEXPR -> PRIMARYEXPR TYPEASSERTION
PRIMARYEXPR -> PRIMARYEXPR ARGUMENTS
SELECTOR -> PERIOD IDENTIFIER
INDEX -> BRACKET_IN EXPRESSION COMMA_EMPTY BRACKET_OUT
EXPRESSION_EMPTY -> ''
EXPRESSION_EMPTY -> EXPRESSION
SLICE -> BRACKET_IN EXPRESSION_EMPTY TWO_POINTS EXPRESSION_EMPTY BRACKET_OUT
SLICE -> BRACKET_IN EXPRESSION_EMPTY TWO_POINTS EXPRESSION TWO_POINTS EXPRESSION BRACKET_OUT
TYPEASSERTION -> PERIOD PARENTHESES_IN TYPE PARENTHESES_OUT
ARGUMENTS -> PARENTHESES_IN ARGUMENTS_EMPTY_DOIS PERIOD PARENTHESES_OUT
ARGUMENTS_EMPTY -> EXPRESSIONLIST
ARUMENTTS_EMPTY -> TYPE EXPRESSIONLIST_COMMA_EMPTY
ARGUMENTS_EMPTY_DOIS -> ARGUMENTS_EMPTY  PARAMETERS_VARIADICS_EMPTY COMMA_EMPTY 
EXPRESSIONLIST_COMMA_EMPTY -> COMMA EXPRESSIONLIST
EXPRESSIONLIST_COMMA_EMPTY -> '' 
PARAMETERS_VARIADICS_EMPTY -> PARAMETERS_VARIADICS
PARAMETERS_VARIADICS_EMPTY -> ''
OPERAND -> LITERAL
OPERAND -> OPERANDNAME
OPERAND -> TYPEARGS
OPERAND -> PARENTHESES_IN EXPRESSION PARENTHESES_OUT
LITERAL -> BASICLIT 
LITERAL -> COMPOSITELIT
LITERAL -> FUNCTIONLIT
BASIC_LIT -> INT_LIT
BASIC_LIT -> FLOAT_LIT
BASIC_LIT -> IMAGINARY_LIT
BASIC_LIT -> RUNE_LIT
BASIC_LIT -> STRING_LIT
OPERANDNAME -> IDENTIFIER
OPERANDNAME -> QUALIFIEDIDENT
TYPE -> TYPENAME TYPEARGS_EMPTY 
TYPE -> TYPELIT '(' TYPE ')'
TYPENAME -> IDENTIFIER
TYPENAME -> QUALIFIEDIDENT
TYPEARGS_EMPTY -> TYPEARGS
TYPEARGS_EMPTY -> ''
TYPEARGS -> '[' TYPELIST COMMA_EMPTY ']'
TYPELIST -> TYPE { ',' TYPE }
TYPELIT -> ARRAYTYPE
TYPELIT -> STRUCTTYPE
TYPELIT -> POINTERTYPE
TYPELIT -> FUNCTIONTYPE
TYPELIT -> INTERFACETYPE
TYPELIT -> SLICETYPE
TYPELIT -> MAPTYPE
TYPELIT -> CHANNELTYPE
ARRAYTYPE -> '[' ARRAYLENGHT ']' ELEMENTTYPE
ARRAYLENGTH -> EXPRESSION
ELEMENTTYPE -> TYPE
STRUCTTYPE -> 'struct' '{' {FIELDDECL ';' } '}'
FIELDDECL -> FIELDDECL_OR TAG_EMPTY
TAG_EMPTY -> ''
TAG_EMPTY -> TAG
FIELDDECL_OR -> IDENTIFIERLIST TYPE
FIELDDECL_OR -> EMBEDDEDFIELD
EMBEDDEDFIELD -> SIGNAL_MULT_EMPTY TYPENAME TYPEARGS_EMPTY
TAG -> STRING_LIT
SIGNAL_MULT_EMPTY -> '*'
SIGNAL_MULT_EMPTY -> ''
POITERTYPE -> '*' BASETYPE
BASETYPE -> TYPE
QUALIFIEDIDENT -> PACKAGENAME '.' IDENTIFIER
PACKAGECLAUSE -> 'package' PACKAGENAME
PACKAGENAME -> IDENTIFIER
FUNCTIONTYPE -> 'func' SIGNATURE
SIGNATURE -> PARAMETERS RESULT_EMPTY
RESULT_EMPTY -> ''
RESULT_EMPTY -> RESULT
RESULT -> PARAMETERS
RESULT -> TYPE
PARAMETERS -> '(' PARAMETERS_EMPTY ')'
PARAMETERS_EMPTY -> ''
PARAMETERS_EMPTY -> PARAMETERSLIST COMMA_EMPTY
PARAMETERLIST -> PARAMETERDECL { ',' PARAMETERDECL }
PARAMETERDECL -> IDENTIFIERLIST_EMPTY PARAMETERS_VARIADICS_EMPTY TYPE
IDENTIFIERLIST_EMPTY -> ''
IDENTIFIERLIST_EMPTY -> IDENTIFIERLIST
IDENTIFIERLIST -> IDENTIFIER { ',' IDENTIFIER }
EXPRESSIONLIST -> EXPRESSION { ',' EXPRESSION }
CONSTSPEC -> IDENTIFIERLIST CONSTSPEC_EXP
CONSTSPEC_EXP -> TYPE_EMPTY '=' EXPRESSIONLIST
CONSTSPEC_EXP -> ''
TYPE_EMPTY -> ''
TYPE_EMPTY -> TYPE
METHODEXPR -> RECEIVERTYPE '.' METHODNAME
RECEIVERTYPE -> TYPE
INTERFACETYPE -> 'interface' '{' { INTERFACEELEM ';' } '}'
INTERFACEELMEN -> METHODELEME 
INTERFACEELMEN -> TYPEELEM
METHODELEMEN -> METHODNAME SIGNATURE
METHODNAME -> IDENTIFIER
TYPEELEM -> TYPETERM { '|' TYPETERM }
TYPETERM -> TYPE 
TYPETERM -> UNDERLYINGTYPE
UNDERLYINGTYPE -> '~' TYPE
SLICETYPE -> '[' ']' ELEMENTTYPE
MAPTYPE -> 'map' '[' KEYTYPE ']' ELEMENTTYPE
KEYTYPE -> TYPE
CHANNELTYPE -> CHANNELTYPE_EXPR ELEMENTTYPE
CHANNELTYPE_EXPR -> 'chan'
CHANNELTYPE_EXPR -> 'chan' '<-'
CHANNELTYPE_EXPR -> '<-' 'chan'
DECLARATION -> CONSTDECL
DECLARATION -> TYPEDECL
DECLARATION -> VARDECL
TOPLEVELDECL -> DECLARATION 
TOPLEVELDECL -> FUNCTIONDECL
TOPLEVELDECL -> METHODDECL
CONSTDECL -> 'const' 
CONSTDECL_EXPR -> CONSTSPEC
CONSTDECL_EXPR -> '(' {CONSTSPEC ';' } ')'
TYPEDECL -> 'type' 
TYPEDECL_EXPR -> TYPESPEC
TYPEDECL_EXPR -> '(' {TYPESPEC ';' } ')'
TYPESPEC -> ALIASDECL
TYPESPEC -> TYPEDEF
ALIASDECL -> IDENTIFIER '=' TYPE
TYPEDEF -> IDENTIFIER TYPEPARAMETERS_EMPTY TYPE
TYPEPARAMETERS_EMPTY -> ''
TYPEPARAMETERS_EMPTY -> TYPEPARAMETERS
VARDECL -> 'var' VARDECL_EXPR
VARDECL_EXPR -> VARSPEC
VARDECL_EXPR -> '(' {VARSPEC ';' } ')'
VARSPEC -> IDENTIFIERLIST VARSPEC_EXPR
VARSPEC_EXPR -> TYPE EQUAL_EXPRESSIONLIST_EMPTY
VARSPEC_EXPR -> '=' EXPRESSIONLIST
EQUAL_EXPRESSIONLIST_EMPTY -> '=' EXPRESSIONLIST
EQUAL_EXPRESSIONLIST_EMPTY -> ''
METHODDECL -> 'func' RECEIVER METHODNAME SIGNATURE FUNCTIONBODY_EMPTY
RECEIVER -> PARAMETERS
LABELEDSTMT -> LABEL ':' STATEMENT
LABEL -> IDENTIFIER
GOSTMT -> 'go' EXPRESSION]
FALLTHROUGHSTMT -> 'fallthrough'
IFSTMT -> 'if' SIMPLESTMT_EXPR_EMPTY EXPRESSION BLOCK ELSE_EXPR_EMPTY 
SIMPLESTMT_EXPR_EMPTY -> SIMPLESTMT ';'
SIMPLESTMT_EXPR_EMPTY -> ''
OR_IF_BLOCK -> IFSTMT
OR_IF_BLOCK -> BLOCK
ELSE_EXPR_EMPTY -> 'else' OR_IF_BLOCK
ELSE_EXPR_EMPTY -> ''
SELECTSTMT -> 'select' '{' {COMMCLAUSE} '}'
COMMCLAUSE -> COMMCASE ':' STATEMENTLIST
COMMCASE -> 'case' SEND_RECV_OR 
COMMCASE -> 'default'
SEND_RECV_OR -> SENDSTMT
SEND_RECV_OR -> RECVSTMT
RECVSTMT -> RECVSTMT_EXPR_EMPTY RECVEXPR
RECVSTMT_EXPR -> EXPRESSIONLIST '='
RECVSTMT_EXPR -> IDENTIFIERLIST ':='
RECVSTMT_EXPR_EMPTY -> RECVSTMT_EXPR
RECVSTMT_EXPR_EMPTY -> ''
RECVEXPR -> EXPRESSION
SENDSTMT -> CHANNEL '<-' EXPRESSION
CHANNEL -> EXPRESSION
FORSTMT -> 'for' FORSTMT_EXPR_EMPTY BLOCK
FORSTMT_EXPR -> CONDITION 
FORSTMT_EXPR -> FORCLAUSE
FORSTMT_EXPR -> RANGECLAUSE
FORSTMT_EXPR_EMPTY -> FORSTMT_EXPR
FORSTMT_EXPR_EMPTY -> ''
CONDITION -> EXPRESSION
FORCLAUSE -> INITSTMT_EMPTY ';' CONDITION_EMPTY ';' POSTSTMT_EMPTY
INITSTMT_EMPTY -> INITSTMT
INITSTMT_EMPTY -> ''
CONDITION_EMPTY -> CONDITION
CONDITION_EMPTY -> ''
POSTMT_EMPTY -> POSTSTMT
POSTMT_EMPTY -> ''
INITSTMT -> SIMPLESTMT
POSTSTMT -> SIMPLESTMT
RANGECLAUSE -> RANGECLAUSE_EXPR_EMPTY 'range' EXPRESSION
RANGECLAUSE_EXPR_EMPTY -> RANGECLAUSE_EXPR
RANGECLAUSE_EXPR_EMPTY -> ''
RANGECLAUSE_EXPR -> EXPRESSIONLIST '='
RANGECLAUSE_EXPR -> IDENTIFIERLIST ':='
DEFERSTMT -> 'defer' EXPRESSION
RETURNSTMT -> 'return' EXPRESSIONLIST_EMPTY
EXPRESSIONLIST_EMPTY -> EXPRESSIONLIST
EXPRESSIONLIST_EMPTY -> ''
 






