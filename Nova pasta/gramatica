S' -> S
S -> ''
S -> FUNCTIONDECL S
FUNCTIONDECL -> "func" FUNCTIONAME SIGNATURE '(' FUNCTIONBODY ')''?'
FunctionName -> identifier
FUNCTIONBODY -> BLOCK
BLOCK -> '{' STATEMENTLIST '}'
COMMA_EMPTY -> ''
COMMA_EMPTY -> ','
STATEMENTLIST -> '(' STATEMENT ";" ')'
STATEMENT -> DECLARATION 
STATEMENT -> LABELEDSTMT
STATEMENT -> SIMPLESTMT
STATEMENT -> GOSTMT
STATEMENT -> FALLTHROUGHSTMT
STATEMENT -> BLOCK
STATEMENT -> IFSTMT
STATEMENT -> SELECTSTMT
STATEMENT -> FORSTMT
STATEMENT -> DEFERSTMT
SIMPLESTMT -> EMPTYSTMT
SIMPLESTMT -> EXPRESSIONSTMT
SIMPLESTMT -> SENDSTMT
SIMPLESTMT -> ASSIGMENT
SIMPLESTMT -> SHORTVARDECL
EMPTYSTMT -> ''
EXPRESSIONSTMT -> EXPRESSION
EXPRESSION -> UNARYEXPR
EXPRESSION -> EXPRESSION BINARY_OP EXPRESSION
UNARYEXPR -> PRIMARYEXPR
UNARYEXPR -> UNARY_OP UNARYEXPR
BINARY_OP -> '||'
BINARY_OP -> '&&'
BINARY_OP -> REL_OP
BINARY_OP -> ADD_OP
BINARY_OP -> MUL_OP 
REL_OP -> '=='
REL_OP -> '!='
REL_OP -> '<'
REL_OP -> '<='
REL_OP -> '>'
REL_OP -> '>='
ADD_OP -> '+'
ADD_OP -> '-'
ADD_OP -> '|'
ADD_OP -> '^'
MUL_OP -> '*'
MUL_OP -> '/'
MUL_OP -> '%'
MUL_OP -> '&'
MUL_OP -> '&^'
UNARY_OP -> '+'
UNARY_OP -> '-'
UNARY_OP -> '!'
UNARY_OP -> '^'
UNARY_OP -> '*'
UNARY_OP -> '&'
UNARY_OP -> '<-'
PRIMARYEXPR -> OPERAND
PRIMARYEXPR -> CONVERSION
PRIMARYEXPR -> METHODEXPR
PRIMARYEXPR -> PRIMARYEXPR SELECTOR
PRIMARYEXPR -> PRIMARYEXPR INDEX
PRIMARYEXPR -> PRIMARYEXPR SLICE
PRIMARYEXPR -> PRIMARYEXPR TYPEASSERTION
PRIMARYEXPR -> PRIMARYEXPR ARGUMENTS
SELECTOR -> '.' IDENTIFIER
INDEX -> '[' EXPRESSION COMMA_EMPTY ']'
EXPRESSION_EMPTY -> ''
EXPRESSION_EMPTY -> EXPRESSION
SLICE -> '[' EXPRESSION_EMPTY ':' EXPRESSION_EMPTY ']'
SLICE -> '[' EXPRESSION_EMPTY ':' EXPRESSION ':' EXPRESSION ']'
TYPEASSERTION -> '.' '(' TYPE ')'
ARGUMENTS -> '(' ARGUMENTS_EMPTY_DOIS ')'
ARGUMENTS_EMPTY -> EXPRESSIONLIST
ARUMENTTS_EMPTY -> TYPE EXPRESSIONLIST_COMMA_EMPTY
ARGUMENTS_EMPTY_DOIS -> ARGUMENTS_EMPTY  PARAMETERS_VARIADICS_EMPTY COMMA_EMPTY 
EXPRESSIONLIST_COMMA_EMPTY -> ',' EXPRESSIONLIST
EXPRESSIONLIST_COMMA_EMPTY -> '' 
PARAMETERS_VARIADICS_EMPTY -> '...'
PARAMETERS_VARIADICS_EMPTY -> ''
OPERAND -> LITERAL
OPERAND -> OPERANDNAME
OPERAND -> TYPEARGS
OPERAND -> '(' EXPRESSION ')'
LITERAL -> BASICLIT 
LITERAL -> COMPOSITELIT
LITERAL -> FUNCTIONLIT
BASIC_LIT -> INT_LIT
BASIC_LIT -> FLOAT_LIT
BASIC_LIT -> IMAGINARY_LIT
BASIC_LIT -> RUNE_LIT
BASIC_LIT -> STRING_LIT
OPERANDNAME -> IDENTIFIER
OPERANDNAME -> QUALIFIEDIDENT
TYPE -> TYPENAME TYPEARGS_EMPTY 
TYPE -> TYPELIT '(' TYPE ')'
TYPENAME -> IDENTIFIER
TYPENAME -> QUALIFIEDIDENT
TYPEARGS_EMPTY -> TYPEARGS
TYPEARGS_EMPTY -> ''
TYPEARGS -> '[' TYPELIST COMMA_EMPTY ']'
TYPELIST -> TYPE { ',' TYPE }
TYPELIT -> ARRAYTYPE
TYPELIT -> STRUCTTYPE
TYPELIT -> POINTERTYPE
TYPELIT -> FUNCTIONTYPE
TYPELIT -> INTERFACETYPE
TYPELIT -> SLICETYPE
TYPELIT -> MAPTYPE
TYPELIT -> CHANNELTYPE
ARRAYTYPE -> '[' ARRAYLENGHT ']' ELEMENTTYPE
ARRAYLENGTH -> EXPRESSION
ELEMENTTYPE -> TYPE
STRUCTTYPE -> 'struct' '{' {FIELDDECL ';' } '}'
FIELDDECL -> FIELDDECL_OR TAG_EMPTY
TAG_EMPTY -> ''
TAG_EMPTY -> TAG
FIELDDECL_OR -> IDENTIFIERLIST TYPE
FIELDDECL_OR -> EMBEDDEDFIELD
EMBEDDEDFIELD -> SIGNAL_MULT_EMPTY TYPENAME TYPEARGS_EMPTY
TAG -> STRING_LIT
SIGNAL_MULT_EMPTY -> '*'
SIGNAL_MULT_EMPTY -> ''
POITERTYPE -> '*' BASETYPE
BASETYPE -> TYPE
QUALIFIEDIDENT -> PACKAGENAME '.' IDENTIFIER
PACKAGECLAUSE -> 'package' PACKAGENAME
PACKAGENAME -> IDENTIFIER
FUNCTIONTYPE -> 'func' SIGNATURE
SIGNATURE -> PARAMETERS RESULT_EMPTY
RESULT_EMPTY -> ''
RESULT_EMPTY -> RESULT
RESULT -> PARAMETERS
RESULT -> TYPE
PARAMETERS -> '(' PARAMETERS_EMPTY ')'
PARAMETERS_EMPTY -> ''
PARAMETERS_EMPTY -> PARAMETERSLIST COMMA_EMPTY
PARAMETERLIST -> PARAMETERDECL { ',' PARAMETERDECL }
PARAMETERDECL -> IDENTIFIERLIST_EMPTY PARAMETERS_VARIADICS_EMPTY TYPE
IDENTIFIERLIST_EMPTY -> ''
IDENTIFIERLIST_EMPTY -> IDENTIFIERLIST
IDENTIFIERLIST -> IDENTIFIER { ',' IDENTIFIER }
EXPRESSIONLIST -> EXPRESSION { ',' EXPRESSION }
CONSTSPEC -> IDENTIFIERLIST CONSTSPEC_EXP
CONSTSPEC_EXP -> TYPE_EMPTY '=' EXPRESSIONLIST
CONSTSPEC_EXP -> ''
TYPE_EMPTY -> ''
TYPE_EMPTY -> TYPE
METHODEXPR -> RECEIVERTYPE '.' METHODNAME
RECEIVERTYPE -> TYPE
INTERFACETYPE -> 'interface' '{' { INTERFACEELEM ';' } '}'
INTERFACEELMEN -> METHODELEME 
INTERFACEELMEN -> TYPEELEM
METHODELEMEN -> METHODNAME SIGNATURE
METHODNAME -> IDENTIFIER
TYPEELEM -> TYPETERM { '|' TYPETERM }
TYPETERM -> TYPE 
TYPETERM -> UNDERLYINGTYPE
UNDERLYINGTYPE -> '~' TYPE
SLICETYPE -> '[' ']' ELEMENTTYPE
MAPTYPE -> 'map' '[' KEYTYPE ']' ELEMENTTYPE
KEYTYPE -> TYPE
CHANNELTYPE -> CHANNELTYPE_EXPR ELEMENTTYPE
CHANNELTYPE_EXPR -> 'chan'
CHANNELTYPE_EXPR -> 'chan' '<-'
CHANNELTYPE_EXPR -> '<-' 'chan'
 



