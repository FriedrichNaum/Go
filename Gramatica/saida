FUNC func
IDENTIFIER usoArray
PARENTHESES_IN (
IDENTIFIER nome
IDENTIFIER int
COMMA ,
IDENTIFIER nommbre
IDENTIFIER bool
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER array
OPERATOR_DECLARATION :=
BRACKET_IN [
INT_LIT 5
BRACKET_OUT ]
IDENTIFIER int
KEY_IN {
INT_LIT 1
COMMA ,
INT_LIT 2
COMMA ,
INT_LIT 3
COMMA ,
INT_LIT 4
KEY_OUT }
SEMICOLON ;
FOR for
IDENTIFIER i
SMALLER <
IDENTIFIER lenght
PARENTHESES_IN (
IDENTIFIER array
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER i
OPERATOR_DECLARATION :=
IDENTIFIER i
SUM +
INT_LIT 1
SEMICOLON ;
KEY_OUT }
RETURN return
IDENTIFIER i
SEMICOLON ;
KEY_OUT }
FUNC func
IDENTIFIER main
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER a
OPERATOR_DECLARATION :=
INT_LIT 10
SUM +
INT_LIT 15
MULTIPLICATION *
INT_LIT 7
SEMICOLON ;
IDENTIFIER b
OPERATOR_DECLARATION :=
INT_LIT 20
DIVISION /
INT_LIT 5
SEMICOLON ;
IDENTIFIER c
OPERATOR_DECLARATION :=
IDENTIFIER b
REST %
INT_LIT 2
SEMICOLON ;
IDENTIFIER soma
OPERATOR_DECLARATION :=
IDENTIFIER a
SUM +
IDENTIFIER b
SEMICOLON ;
IDENTIFIER diferenca
OPERATOR_DECLARATION :=
IDENTIFIER a
DIFFERENCE -
IDENTIFIER b
SEMICOLON ;
IF if
IDENTIFIER a
SMALLER <
INT_LIT 5
AND &&
IDENTIFIER b
BIGGER >
IDENTIFIER usoArray
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_IN {
KEY_OUT }
ELSE else
IF if
IDENTIFIER a
EQUAL_COMPARISON ==
INT_LIT 5
OR ||
IDENTIFIER a
MORE_OR_EQUAL >=
INT_LIT 5
KEY_IN {
IDENTIFIER soma
OPERATOR_DECLARATION :=
IDENTIFIER a
SUM +
IDENTIFIER b
SEMICOLON ;
KEY_OUT }
ELSE else
KEY_IN {
IDENTIFIER diferenca
OPERATOR_DECLARATION :=
IDENTIFIER a
DIFFERENCE -
IDENTIFIER usoArray
PARENTHESES_IN (
INT_LIT 25
COMMA ,
BOOL true
PARENTHESES_OUT )
SEMICOLON ;
KEY_OUT }
KEY_OUT }
$ $
