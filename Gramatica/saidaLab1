PACKAGE package
IDENTIFIER main
IMPORT import
PARENTHESES_IN (
STRING_LITERAL "fmt"
PARENTHESES_OUT )
TYPE_LABEL type
IDENTIFIER Ponto
STRUCT struct
KEY_IN {
IDENTIFIER x
IDENTIFIER int
IDENTIFIER y
IDENTIFIER int
KEY_OUT }
FUNC func
IDENTIFIER funcao
PARENTHESES_IN (
IDENTIFIER v
BRACKET_IN [
BRACKET_OUT ]
IDENTIFIER Ponto
COMMA ,
IDENTIFIER n
IDENTIFIER int
PARENTHESES_OUT )
IDENTIFIER float64
KEY_IN {
IF if
IDENTIFIER n
LESS_OR_EQUAL <=
INT_LIT 0
KEY_IN {
RETURN return
FLOAT_LIT 1.0
KEY_OUT }
ELSE else
IF if
IDENTIFIER n
EQUAL_COMPARISON ==
INT_LIT 1
KEY_IN {
RETURN return
FLOAT_LIT 1.01
SUM +
IDENTIFIER float64
PARENTHESES_IN (
IDENTIFIER v
BRACKET_IN [
INT_LIT 0
BRACKET_OUT ]
PERIOD .
IDENTIFIER x
PARENTHESES_OUT )
DIVISION /
FLOAT_LIT 1.e2
SUM +
IDENTIFIER float64
PARENTHESES_IN (
IDENTIFIER v
BRACKET_IN [
INT_LIT 0
BRACKET_OUT ]
PERIOD .
IDENTIFIER y
PARENTHESES_OUT )
DIVISION /
FLOAT_LIT 0.1e-2
KEY_OUT }
IDENTIFIER res
OPERATOR_DECLARATION :=
FLOAT_LIT 0.25e-13
FOR for
IDENTIFIER i
OPERATOR_DECLARATION :=
IDENTIFIER n
DIFFERENCE -
INT_LIT 1
SEMICOLON ;
IDENTIFIER i
MORE_OR_EQUAL >=
INT_LIT 0
AND &&
IDENTIFIER v
BRACKET_IN [
IDENTIFIER i
BRACKET_OUT ]
PERIOD .
IDENTIFIER x
BIGGER >
INT_LIT 0
SEMICOLON ;
IDENTIFIER i
DECREMENT --
KEY_IN {
IDENTIFIER temp
OPERATOR_DECLARATION :=
IDENTIFIER float64
PARENTHESES_IN (
IDENTIFIER v
BRACKET_IN [
IDENTIFIER i
BRACKET_OUT ]
PERIOD .
IDENTIFIER y
MULTIPLICATION *
IDENTIFIER v
BRACKET_IN [
IDENTIFIER i
BRACKET_OUT ]
PERIOD .
IDENTIFIER x
REST %
INT_LIT 123
PARENTHESES_OUT )
IF if
IDENTIFIER temp
SMALLER <
FLOAT_LIT 0.0
KEY_IN {
IDENTIFIER res
DIFFERENCE_EQUAL -=
IDENTIFIER res
MULTIPLICATION *
FLOAT_LIT 2.e-2
SUM +
IDENTIFIER funcao
PARENTHESES_IN (
IDENTIFIER v
COMMA ,
IDENTIFIER n
DIFFERENCE -
INT_LIT 1
PARENTHESES_OUT )
MULTIPLICATION *
IDENTIFIER temp
KEY_OUT }
ELSE else
KEY_IN {
IDENTIFIER res
SUM_EQUAL +=
IDENTIFIER res
MULTIPLICATION *
FLOAT_LIT 0.3e3
SUM +
IDENTIFIER funcao
PARENTHESES_IN (
IDENTIFIER v
COMMA ,
IDENTIFIER n
DIFFERENCE -
INT_LIT 2
PARENTHESES_OUT )
MULTIPLICATION *
IDENTIFIER temp
IDENTIFIER fmt
PERIOD .
IDENTIFIER Println
PARENTHESES_IN (
STRING_LITERAL "Estranho, nÃ©?"
PARENTHESES_OUT )
KEY_OUT }
KEY_OUT }
RETURN return
IDENTIFIER res
KEY_OUT }
FUNC func
IDENTIFIER main
PARENTHESES_IN (
PARENTHESES_OUT )
KEY_IN {
IDENTIFIER pontos
OPERATOR_DECLARATION :=
BRACKET_IN [
BRACKET_OUT ]
IDENTIFIER Ponto
KEY_IN {
KEY_IN {
IDENTIFIER x
UNKNOWN :
INT_LIT 1
COMMA ,
IDENTIFIER y
UNKNOWN :
INT_LIT 2
KEY_OUT }
COMMA ,
KEY_IN {
IDENTIFIER x
UNKNOWN :
INT_LIT 3
COMMA ,
IDENTIFIER y
UNKNOWN :
INT_LIT 4
KEY_OUT }
COMMA ,
KEY_IN {
IDENTIFIER x
UNKNOWN :
INT_LIT 5
COMMA ,
IDENTIFIER y
UNKNOWN :
INT_LIT 6
KEY_OUT }
KEY_OUT }
IDENTIFIER resultado
OPERATOR_DECLARATION :=
IDENTIFIER funcao
PARENTHESES_IN (
IDENTIFIER pontos
COMMA ,
IDENTIFIER len
PARENTHESES_IN (
IDENTIFIER pontos
PARENTHESES_OUT )
PARENTHESES_OUT )
IDENTIFIER fmt
PERIOD .
IDENTIFIER Println
PARENTHESES_IN (
STRING_LITERAL "Resultado:"
COMMA ,
IDENTIFIER resultado
PARENTHESES_OUT )
KEY_OUT }
