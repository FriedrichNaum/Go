/* Generated By:JavaCC: Do not edit this line. GoTokenManager.java */

/** Token Manager. */
public class GoTokenManager implements GoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000200000000000L) != 0L)
            return 7;
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 4;
         if ((active0 & 0x1ffffff00L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 0;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x2108000L) != 0L)
            return 1;
         if ((active0 & 0x200000000000000L) != 0L)
            return 3;
         if ((active0 & 0x1fdef7f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x120010000L) != 0L)
            return 1;
         if ((active0 & 0xddfe7f00L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0xd5e25b00L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x81c2400L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0xd1621a00L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x4804100L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x11200a00L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0xc0421000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x11000800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x200200L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x1000800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x10000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x800L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 67;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 37:
         {
         jjmatchedKind = 63;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 38:
         {
         jjmatchedKind = 64;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x10822000000000L);
      case 40:
         return jjStopAtPos(0, 73);
      case 41:
         return jjStopAtPos(0, 74);
      case 42:
         {
         jjmatchedKind = 61;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 43:
         {
         jjmatchedKind = 59;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x40040000000000L);
      case 44:
         return jjStopAtPos(0, 77);
      case 45:
         {
         jjmatchedKind = 60;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x80080000000000L);
      case 46:
         {
         jjmatchedKind = 79;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 47:
         {
         jjmatchedKind = 62;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 58:
         {
         jjmatchedKind = 58;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 59:
         return jjStopAtPos(0, 78);
      case 60:
         {
         jjmatchedKind = 68;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x24010800000000L);
      case 61:
         {
         jjmatchedKind = 70;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 62:
         {
         jjmatchedKind = 69;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x8009000000000L);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 94:
         {
         jjmatchedKind = 66;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10842000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4200L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x21000400L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x108000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x42000800L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x84000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x421000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 123:
         return jjStopAtPos(0, 71);
      case 124:
         {
         jjmatchedKind = 65;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x1004000000000L);
      case 125:
         return jjStopAtPos(0, 72);
      case 126:
         return jjStopAtPos(0, 80);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 43:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 45:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L);
      case 60:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 94:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x105212000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80005200L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30900000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 124:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(2, 57);
         break;
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x14800400L);
      case 112:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x48000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80100800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x300L);
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 1);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x5800L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         break;
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x421000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 107:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 1);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000800L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 1);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 217;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(4, 6);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 21);
                  else if ((0x7L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(22, 27);
                  else if (curChar == 39)
                     jjCheckNAddStates(28, 34);
                  else if (curChar == 46)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(35, 39);
                  }
                  else if (curChar == 47)
                     jjAddStates(40, 41);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(42, 51);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(52, 69);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x7L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 3:
                  if (curChar == 46 && kind > 93)
                     kind = 93;
                  break;
               case 5:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjAddStates(40, 41);
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 10:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 42)
                     jjCheckNAddStates(70, 72);
                  break;
               case 13:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 16:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 18:
                  if (curChar != 48)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(52, 69);
                  break;
               case 21:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjAddStates(73, 74);
                  break;
               case 25:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(26, 25);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjAddStates(75, 76);
                  break;
               case 33:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjAddStates(77, 78);
                  break;
               case 37:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddTwoStates(38, 37);
                  break;
               case 40:
                  if (curChar == 46)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(46, 45);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 50:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(51, 43);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 90);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 96);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjAddStates(97, 98);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 67:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(102, 104);
                  break;
               case 71:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddStates(105, 107);
                  break;
               case 74:
                  if (curChar == 46)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(111, 113);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(114, 116);
                  break;
               case 84:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(85, 77);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(117, 119);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(120, 122);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(123, 128);
                  break;
               case 90:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(35, 39);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(4, 6);
                  break;
               case 94:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(96, 95);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 64);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(129, 131);
                  break;
               case 103:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 34);
                  break;
               case 104:
                  if ((0x7L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if (curChar == 39 && kind > 89)
                     kind = 89;
                  break;
               case 106:
                  if (curChar == 46)
                     jjCheckNAdd(105);
                  break;
               case 107:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 110:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 111:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 112:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 113:
                  if ((0x407L & l) != 0L)
                     jjCheckNAddStates(132, 134);
                  break;
               case 114:
                  if (curChar == 46)
                     jjCheckNAddStates(132, 134);
                  break;
               case 115:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 119:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
               case 132:
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(128);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 135:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 138:
                  if (curChar == 34)
                     jjCheckNAddStates(22, 27);
                  break;
               case 139:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(135, 137);
                  break;
               case 141:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(135, 137);
                  break;
               case 142:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 143:
                  if ((0x7L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 144:
                  if (curChar == 46)
                     jjCheckNAddStates(138, 141);
                  break;
               case 145:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 34 && kind > 92)
                     kind = 92;
                  break;
               case 149:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
               case 162:
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(158);
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 166:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 21);
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(142, 144);
                  break;
               case 172:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(173);
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(174, 173);
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(145, 147);
                  break;
               case 177:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(178, 180);
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(148, 150);
                  break;
               case 181:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(182);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(183, 182);
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(151, 153);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(154, 156);
                  break;
               case 188:
                  if (curChar == 46)
                     jjCheckNAddStates(157, 159);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(160, 163);
                  break;
               case 192:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(193, 64);
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(164, 166);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(167, 169);
                  break;
               case 198:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(199, 64);
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(170, 172);
                  break;
               case 201:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(42, 51);
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(202, 203);
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjAddStates(173, 174);
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(206);
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(207);
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(208, 209);
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjAddStates(175, 176);
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(212, 64);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(177, 179);
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(180, 182);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(183, 185);
                  else if (curChar == 105)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(94, 95);
                  }
                  break;
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(1);
                  break;
               case 8:
                  jjAddStates(186, 187);
                  break;
               case 11:
                  jjAddStates(188, 189);
                  break;
               case 13:
               case 15:
                  jjCheckNAddStates(70, 72);
                  break;
               case 19:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
               case 22:
                  if (curChar == 95)
                     jjCheckNAdd(21);
                  break;
               case 23:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
               case 26:
                  if (curChar == 95)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
               case 30:
                  if (curChar == 95)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(30, 29);
                  break;
               case 31:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
               case 34:
                  if (curChar == 95)
                     jjCheckNAdd(33);
                  break;
               case 35:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
               case 38:
                  if (curChar == 95)
                     jjCheckNAdd(37);
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(190, 192);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 42:
                  if (curChar == 95)
                     jjCheckNAdd(41);
                  break;
               case 43:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if (curChar == 95)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(48, 53);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(82, 84);
                  break;
               case 49:
                  if (curChar == 95)
                     jjCheckNAdd(48);
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(85, 87);
                  break;
               case 52:
                  if (curChar == 95)
                     jjCheckNAdd(51);
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(88, 90);
                  break;
               case 54:
                  if (curChar == 95)
                     jjCheckNAdd(53);
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(91, 96);
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
               case 59:
                  if (curChar == 95)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(59, 58);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
               case 63:
                  if (curChar == 95)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(99, 101);
                  break;
               case 64:
                  if (curChar == 105 && kind > 87)
                     kind = 87;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
               case 68:
                  if (curChar == 95)
                     jjCheckNAdd(67);
                  break;
               case 69:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 70:
               case 72:
                  if (curChar == 95)
                     jjCheckNAdd(71);
                  break;
               case 73:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(193, 195);
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(108, 110);
                  break;
               case 76:
                  if (curChar == 95)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
                  if (curChar == 95)
                     jjCheckNAdd(79);
                  break;
               case 81:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(82, 87);
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(114, 116);
                  break;
               case 83:
                  if (curChar == 95)
                     jjCheckNAdd(82);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(117, 119);
                  break;
               case 86:
                  if (curChar == 95)
                     jjCheckNAdd(85);
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(120, 122);
                  break;
               case 88:
                  if (curChar == 95)
                     jjCheckNAdd(87);
                  break;
               case 89:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(123, 128);
                  break;
               case 92:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(94, 95);
                  break;
               case 96:
                  if (curChar == 95)
                     jjCheckNAdd(95);
                  break;
               case 98:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(183, 185);
                  break;
               case 102:
                  if (curChar == 95)
                     jjCheckNAdd(101);
                  break;
               case 109:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 112:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 118:
                  if (curChar == 92)
                     jjAddStates(196, 200);
                  break;
               case 119:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 120:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
               case 132:
               case 134:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(128);
                  break;
               case 128:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 129:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 133:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 139:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(135, 137);
                  break;
               case 140:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 141:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(135, 137);
                  break;
               case 148:
                  if (curChar == 92)
                     jjAddStates(201, 205);
                  break;
               case 149:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 150:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 156:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
               case 162:
               case 164:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(158);
                  break;
               case 158:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 159:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 163:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 169:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 171:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(172, 173);
                  break;
               case 174:
                  if (curChar == 95)
                     jjCheckNAdd(173);
                  break;
               case 175:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 179:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(181, 182);
                  break;
               case 183:
                  if (curChar == 95)
                     jjCheckNAdd(182);
                  break;
               case 184:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 186:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 190:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(206, 208);
                  break;
               case 194:
                  if (curChar == 95)
                     jjCheckNAdd(193);
                  break;
               case 195:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 197:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(209, 211);
                  break;
               case 200:
                  if (curChar == 95)
                     jjCheckNAdd(199);
                  break;
               case 203:
                  if (curChar != 95)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(204);
                  break;
               case 205:
                  if (curChar == 95)
                     jjCheckNAdd(204);
                  break;
               case 209:
                  if (curChar != 95)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(210);
                  break;
               case 211:
                  if (curChar == 95)
                     jjCheckNAdd(210);
                  break;
               case 214:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(215, 64);
                  break;
               case 216:
                  if (curChar == 95)
                     jjCheckNAdd(215);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 93)
                     kind = 93;
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(186, 187);
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(188, 189);
                  break;
               case 13:
               case 15:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(70, 72);
                  break;
               case 104:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 112:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(132, 134);
                  break;
               case 139:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(135, 137);
                  break;
               case 143:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(138, 141);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 217 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   98, 99, 64, 97, 92, 93, 91, 169, 170, 171, 175, 176, 177, 184, 185, 186, 
   187, 188, 195, 196, 197, 64, 139, 140, 142, 143, 146, 148, 104, 108, 109, 112, 
   113, 116, 118, 91, 93, 97, 99, 64, 7, 10, 202, 203, 206, 207, 208, 209, 
   212, 213, 214, 64, 19, 23, 24, 25, 27, 31, 35, 36, 37, 39, 56, 60, 
   65, 66, 67, 69, 73, 64, 13, 14, 16, 22, 21, 30, 29, 34, 33, 42, 
   41, 43, 49, 48, 50, 52, 51, 43, 54, 53, 43, 49, 48, 50, 54, 53, 
   43, 59, 58, 63, 62, 64, 68, 67, 64, 72, 71, 64, 76, 75, 77, 80, 
   79, 64, 83, 82, 84, 86, 85, 77, 88, 87, 77, 83, 82, 84, 88, 87, 
   77, 102, 64, 101, 113, 116, 117, 139, 140, 142, 143, 146, 147, 148, 169, 170, 
   171, 175, 176, 177, 179, 178, 180, 184, 185, 64, 186, 187, 188, 189, 191, 64, 
   190, 189, 191, 64, 194, 64, 193, 195, 196, 197, 200, 64, 199, 205, 204, 211, 
   210, 213, 214, 64, 216, 64, 215, 100, 101, 64, 8, 9, 11, 12, 40, 47, 
   55, 74, 81, 89, 119, 120, 129, 133, 135, 149, 150, 159, 163, 165, 192, 193, 
   64, 198, 199, 64, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x3fffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0xc0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[217];
static private final int[] jjstateSet = new int[434];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public GoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public GoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 217; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     try { input_stream.backup(0);
        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
           curChar = input_stream.BeginToken();
     }
     catch (java.io.IOException e1) { continue EOFLoop; }
     jjmatchedKind = 5;
     jjmatchedPos = -1;
     curPos = 0;
     curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         SkipLexicalActions(null);
         continue EOFLoop;
      }
      jjimageLen += jjmatchedPos + 1;
      curPos = 0;
      jjmatchedKind = 0x7fffffff;
      try {
         curChar = input_stream.readChar();
         continue;
      }
      catch (java.io.IOException e1) { }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
 }
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         break;
      case 2 :
         break;
      case 3 :
         break;
      case 4 :
         break;
      case 5 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() &&
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
